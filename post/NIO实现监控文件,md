+++
date = "2016-03-20T23:46:08+08:00"
draft = true
title = "NIO实现监控文件,md"

+++

# JAVA7 NIO监控文件

标签（空格分隔）： 未分类

---

 最近在实际项目开发中经常需要解析服务器文件，以前是使用spring定时器来实现，但是这样的话有几个缺点，由于文件更新时间不固定，定时器时间长短的设定就很麻烦，时间设长了的话数据响应不及时，设短了的话，更新过于频繁，又浪费资源，虽然给文件加了MD5校验，但是总感觉实现不够优雅，做不到实时响应。
 为了加快数据响应的速度，能不能做到实时响应文件变化而无需通过定时器呢？于是就想到在实际开发中版本控制工具（如svn，git等）或者IDE（idea,eclipse等）会实时监控文件，一旦文件有任何变化，立马会给出相应的提示。他们是怎么实现的呢？JAVA有没有类似的功能呢？果断google之，果然有，JAVA7的NIO2.0就提供了这个功能，用于监听文件系统的更改。它采用类似观察者模式，注册相关的文件更改事件(新建，删除……)，当事件发生的，通知相关的监听者。

 Java 7 新引入的 java.nio.file 包中有一套监视文件系统变更的 Watch Service API。可以使用这些 API 把一个目录注册到监视服务上。在注册的时候需要指定我们感兴趣的事件类型，比如文件创建、文件修改、文件删除等。当监视的事件发生时，监视服务会根据需要处理这些事件。这些 API 主要包括：

>     java.nio.file.WatchService
> 
>     文件系统监视服务的接口类，它的具体实现由监视服务提供者负责加载。比如在 Windows 系统上，它的实现类为：sun.nio.fs.WindowsWatchService。
>     
>     java.nio.file.Watchable
> 
>     实现了 java.nio.file.Watchable 的对象才能注册监视服务 WatchService。java.nio.file.Path实现了 watchable 接口，后文使用 Path 对象注册监视服务。
>     
>     java.nio.file.WatchKey
> 
>     该类代表着 Watchable 对象和监视服务 WatchService 的注册关系。WatchKey 在 Watchable 对象向 WatchService 注册的时候被创建。它是 Watchable 和 WatchService之间的关联类

具体监控文件的步骤如下：
 1. 创建 WatchService 的一个实例变量 "watcher"。
 2. 使用 watcher 注册每一个想要监视的目录。注册目录到监视服务时，需要指定想要接收文件更改通知的事件类型。注册目录会返回一个WatchKey 实例 key。
 3. 执行一个无限循环来监控要到来的事件。当一个事件发生时，对实例 key 发出信号通知并且将它放到 watcher 的队列中。
 4. 从 watcher 的队列中重新得到key实例。Key实例包含发生变更的文件名。
 5. 从 key 实例中得到挂起的事件，然后根据需要对这些事件进行处理。
 6. 重置 key 实例并重新开始监控事件。
 7. 监控完毕，关掉监视服务。
    
以下是主要的代码示例，实际中结合业务会更加复杂，比如会增加多线程等：
/**
 * Created by ruiyuansheng on 2016/3/3.
 */
public class Watcher {
    private WatchService watcher;

    private Path path;

    public Watcher(Path path)throws IOException {
        watcher = FileSystems.getDefault().newWatchService();
        this.path = path;
        path.register(watcher, StandardWatchEventKinds.ENTRY_CREATE,StandardWatchEventKinds.ENTRY_DELETE,StandardWatchEventKinds.ENTRY_MODIFY);
    }

    public void handleEvents() throws InterruptedException{
        while(true){
            WatchKey key = watcher.take();
            for(WatchEvent event : key.pollEvents()){
                WatchEvent.Kind kind = event.kind();

                if(kind == StandardWatchEventKinds.OVERFLOW){//事件可能lost or discarded
                    continue;
                }

                WatchEvent e = (WatchEvent)event;
                Path fileName = (Path)e.context();

                System.out.printf("Event %s has happened,which fileName is %s%n"
                        ,kind.name(),path.toString() + fileName.toString());
            }
            if(!key.reset()){
                break;
            }
        }
    }

    public static void main(String args[]) throws IOException, InterruptedException{
    new Watcher(Paths.get("E:/1.txt")).handleEvents();
    }
}





