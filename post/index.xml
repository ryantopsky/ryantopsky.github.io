<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 远行客Ryan的博客</title>
    <link>http://ryantopsky.github.io/post/</link>
    <description>Recent content in Posts on 远行客Ryan的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Feb 2016 22:41:54 +0800</lastBuildDate>
    <atom:link href="http://ryantopsky.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>strategy</title>
      <link>http://ryantopsky.github.io/post/strategy/</link>
      <pubDate>Thu, 18 Feb 2016 22:41:54 +0800</pubDate>
      
      <guid>http://ryantopsky.github.io/post/strategy/</guid>
      <description>

&lt;h1 id=&#34;策略模式:010736ab8fdfc1cfa693a6e5a7960263&#34;&gt;策略模式&lt;/h1&gt;

&lt;p&gt;标签： 设计模式&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;设计模式（Design Pattern)是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。与其说是代码复用，不如说是经验复用。他可以让我们站在巨人的肩膀上，利用前人的经验和智慧来解决我们遇到的类似的问题。&lt;/p&gt;

&lt;p&gt;先从第一个设计模式“策略模式”开始。谈策略模式之前，先看看为什么要使用策略模式，他的使用场景是什么。在《Head First设计模式》中给出了一个很经典的鸭子的例子，一步步推导出策略模式的使用。
首先是很简单的一个鸭子（Duck）模拟：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yuml.me/7537b47c&#34; alt=&#34;鸭子&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;但是需求往往会发生变化（这事经常发生），例如现在需要让鸭子能飞，第一感觉我们只要在Duck类上加上fly()方法，然后其他所有的鸭子都会继承他，毕竟这对于OO来说是小case：
&lt;img src=&#34;http://yuml.me/0fe7d710&#34; alt=&#34;此处输入图片的描述&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;但是问题来了：并非所有的鸭子都是会飞的，比如前段时间很火的大黄鸭就不会飞。在超类中加入fly()会导致所有子类都具备fly(),包括不会飞的子类。怎么解决呢？最直接的解决办法就是子类把Duck中的fly方法覆盖掉，但是这只是一方面，除了不会飞，也并不是所有的鸭子都会叫，大黄鸭既不会飞也不会叫，有的鸭子会叫不会飞。。。。如果都要子类来覆盖也太麻烦了。
这时候我们体会到了用继承来处理Duck行为的一些缺点了：
1.代码在多个子类里重复。
2.很难知道所有鸭子的全部行为，鸭子的行为各个不同。
3.运行时的行为不容易改变，不够灵活。
4.改变会牵一发而动全身，造成其他鸭子不想要的改变。&lt;/p&gt;

&lt;p&gt;继承不是解决方案，那么利用接口呢？把fly（）从超类中提取出来放到一个Flyable接口中。只有会飞的鸭子才去实现它。这样的确可以解决不会飞的鸭子飞起来的问题，但会造成代码无法复用，如果有几百只鸭子，要改变下飞行行为，简直是噩梦：
&lt;img src=&#34;http://yuml.me/00d1995b&#34; alt=&#34;此处输入图片的描述&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;为了解决这些问题，需要用到一些设计原则：
1.封装变化：找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。（对于本例来说，我们知道Duck类中的fly()和quack()会随着鸭子的不同而变化，所以需要把它们从Duck中飞出来。）,如下图：
&lt;img src=&#34;http://yuml.me/97e37f43&#34; alt=&#34;此处输入图片的描述&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;2.针对接口编程，不要针对实现编程。
我们利用接口代表每个行为，而行为的每个实现都将实现其中一接口。
如下：
而以前的做法，行为来自超类Duck或者继承自某个接口后子类自己实现的，都依赖于“实现”，耦合性太强，没法灵活的更改行为。
现在的设计，可以让飞行和咕咕叫的动作被其他对象复用，而这些行为已经与鸭子类无关了。而我们增加一些行为，也不会影响到既有的行为类，也不会影响到使用行为的鸭子类。&lt;/p&gt;

&lt;p&gt;下面是整体设计：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yuml.me/34a3e5ba&#34; alt=&#34;此处输入图片的描述&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;这里面用到了设计的第三个原则：
3.多用组合，少用继承
组合关系是“有一个”关系，每一个鸭子都有一个FlyBehavior和QuackBehavior,鸭子的行为不是继承来的，而是和适当的行为组合来的，使用组合使系统具有很大的弹性，不仅可以将算法族封装成类，还可以在运行时动态改变行为。&lt;/p&gt;

&lt;p&gt;最后给出策略模式的定义：
策略模式定义了算法族，分别封装起来，让他们之间可以相互替换。此模式让算法的独立变化独立于使用算法的客户。
策略模式的代码实现：
&lt;pre&gt;&lt;code&gt;
   //Duck类
   public abstract class Duck {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QuackBehavior quackBehavior;

FlyBehavior flyBehavior;

public void peformFly(){
    flyBehavior.fly();
}

public void peformQuack(){
    quackBehavior.Quack();
}

public void display(){}

public void swim(){}

public FlyBehavior getFlyBehavior() {
    return flyBehavior;
}

public void setFlyBehavior(FlyBehavior flyBehavior) {
    this.flyBehavior = flyBehavior;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;public interface FlyBehavior {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void fly();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;public class FlyWithWings implements FlyBehavior {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void fly() {
    System.out.println(&amp;quot;I am fly with wings&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
public class FlyNoWay implements FlyBehavior {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void fly() {
    System.out.println(&amp;quot;I can not fly&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;public interface QuackBehavior {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Quack();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;public class Quack implements QuackBehavior {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void Quack() {
    System.out.println(&amp;quot;quack!&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;public class MuteQuack implements QuackBehavior {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public void Quack() {
    System.out.println(&amp;quot;mute quack!&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;public class MallarDuck extends Duck {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public MallarDuck() {
    flyBehavior = new FlyWithWings();
    quackBehavior = new Quack();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;public class RedDuck extends Duck {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public RedDuck() {
    flyBehavior = new FlyNoWay();
    quackBehavior = new MuteQuack();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
public class MiniDuckSimulator {
    public static void main(String[] args) {
        Duck mallar = new MallarDuck();
        mallar.performQuack();
        mallar.performFly();
    }
}
&lt;/code&gt;&lt;/pre&gt;
结果：
quack!&lt;/p&gt;

&lt;p&gt;I am fly with wings&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>枚举</title>
      <link>http://ryantopsky.github.io/post/%E6%9E%9A%E4%B8%BE/</link>
      <pubDate>Wed, 20 Jan 2016 01:14:14 +0800</pubDate>
      
      <guid>http://ryantopsky.github.io/post/%E6%9E%9A%E4%B8%BE/</guid>
      <description>

&lt;h1 id=&#34;枚举:4856ca9a2bc69d990ff8a98191a686f0&#34;&gt;枚举&lt;/h1&gt;

&lt;p&gt;标签（空格分隔）： java&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;##什么是枚举
枚举类型（enum type）是指一组固定的常量组成的合法值类型。也是JAVA1.5以后引入的新特性。那么为什么要引入枚举类呢？在没有枚举类型之前，常用方法是声明一组具名的int或者String常量。每个类型成员对应一个常量：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public static final int APPLE = 0;
    public static final int ORANGE = 1;
    public static final String APPLE = &amp;quot;APPLE&amp;quot;;
    public static final String ORANGE = &amp;quot;ORANGE&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是采用这种方法，耦合性太强。一旦常量值发生变化，会影响调用到他们的客户端，不方便也不安全。
所以在java1.5以后支持枚举类型，可以避免以上的缺点并且带来额外的好处。他的基本形式如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public enum Fruit{
    APPLE,ORANGE,BANANA
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么enum枚举到底为我们带来了什么直接的好处呢？
###switch
第一个好处是扩大了switch的使用范围，5.0 之前，Java 中 switch的值只能够是简单类型，比如int、byte、short、char,有了枚举类型之后，就可以使用对象了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 定义一周七天的枚举类型			
 public enum WeekDayEnum { Mon, Tue, Wed, Thu, Fri, Sat, Sun } 

 // 读取当天的信息
 WeekDayEnum today = readToday(); 
 
 // 根据日期来选择进行活动
 switch(today) { 
  Mon: do something; break; 
  Tue: do something; break; 
  Wed: do something; break; 
  Thu: do something; break; 
  Fri: do something; break; 
  Sat: play sports game; break; 
  Sun: have a rest; break; 
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;###关于EnumSet和EnumMap
DK5.0 中在增加 Enum 类的同时，也增加了两个工具类 EnumSet 和 EnumMap，这两个类都放在 java.util 包中。EnumSet 是一个针对枚举类型的高性能的 Set 接口实现。EnumSet 中装入的所有枚举对象都必须是同一种类型。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;enum WeekDayEnum { Mon, Tue, Wed, Thu, Fri, Sat, Sun }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你能够在每周七天日期中进行迭代，EnumSet 类提供一个静态方法 range 让迭代很容易完成：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;for(WeekDayEnum day : EnumSet.range(WeekDayEnum.Mon,WeekDayEnum.Fri)) { 
     System.out.println(day); 
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EnumSet 还提供了很多个类型安全的获取子集的of方法，使你很容易取得子集：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; EnumSet&amp;lt;WeekDayEnum&amp;gt; subset = EnumSet.of(WeekDayEnum.Mon,WeekDayEnum.Wed); 
      for (WeekDayEnum day : subset) { 
          System.out.println(day);  
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与 EnumSet 类似，EnumMap 也是一个高性能的 Map 接口实现，用来管理使用枚举类型作为 keys 的映射表，内部是通过数组方式来实现。EnumMap 将丰富的和安全的 Map 接口与数组快速访问结合到一起，如果你希望要将一个枚举类型映射到一个值，你应该使用 EnumMap。看下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 定义一个 EnumMap 对象，映射表主键是日期枚举类型，值是颜色枚举类型
 private static Map&amp;lt;WeekDayEnum, RainbowColor&amp;gt; schema = 
            new EnumMap&amp;lt;WeekDayEnum, RainbowColor&amp;gt;(WeekDayEnum.class); 
    
 static{ 
    // 将一周的每一天与彩虹的某一种色彩映射起来
    for (int i = 0; i &amp;lt; WeekDayEnum.values().length; i++) { 
        schema.put(WeekDayEnum.values()[i], RainbowColor.values()[i]); 
    } 
 } 
 System.out.println(&amp;quot;What is the lucky color today?&amp;quot;); 
 System.out.println(&amp;quot;It&#39;s &amp;quot; + schema.get(WeekDayEnum.Sat));
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>java泛型</title>
      <link>http://ryantopsky.github.io/post/%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Tue, 19 Jan 2016 15:14:39 +0800</pubDate>
      
      <guid>http://ryantopsky.github.io/post/%E6%B3%9B%E5%9E%8B/</guid>
      <description>

&lt;h1 id=&#34;java泛型:3cba9eda553e6d095741895b3b7fd5aa&#34;&gt;JAVA泛型&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;泛型是JAVA1.5版本新增的概念，以前版本是没有的。那么为什么要加泛型，什么是泛型，怎么使用呢？
泛型最主要是用在集合类框架中，在没有使用泛型之前，从集合中读取的每个对象都必须转换。如果不小心插入了错误的对象，在运行时就会报错。而有了泛型以后，就可以告诉编译器集合接受哪些类型，编译器自动为插入做转换，并在编译时告知是否插入了错误的对象。这样会使程序更安全，也更加清楚。
但是为了兼容1.5版本以前的JAVA代码，考虑到“移植兼容性”还是要支持原生类型，1.5及以后的版本尽量还是使用泛型。&lt;/p&gt;

&lt;h1 id=&#34;什么是泛型:3cba9eda553e6d095741895b3b7fd5aa&#34;&gt;什么是泛型&lt;/h1&gt;

&lt;p&gt;声明中具有一个或多个类型参数（Type parameter）的类或接口就是泛型类或接口。泛型类或接口统称泛型（generic type）。
我们来看下泛型是怎样保证类型安全的，没有使用泛型的时候：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//My Integer Collection,没有使用泛型
private final List list = new ArrayList();
list.add(1);
list.add(&amp;quot;1&amp;quot;);
for(Iterator itr = list.iterator(); itr.hasNext();){
    int i = (Integer)itr.next();//Throws ClassCastException
    .....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没有使用泛型的时候，程序只有到运行时才报错，而编译时一切正常，这对于我们编程来说是不安全的。所有的错误越早发现越好，最好是编译时就可以发现错误。而泛型就可以做到这点：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private final List&amp;lt;Integer&amp;gt; list = Lists.newArrayList();
list.add(1);
list.add(&amp;quot;1&amp;quot;);//编译时会报错，不能将String类型插入Integer类型
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;见识到应用泛型的好处，但有几个问题必须弄清楚：&lt;/p&gt;

&lt;h3 id=&#34;list-lt-object-list-lt-与list区别:3cba9eda553e6d095741895b3b7fd5aa&#34;&gt;List&amp;lt;Object&amp;gt;、List&amp;lt;?&amp;gt;与List区别&lt;/h3&gt;

&lt;p&gt;List是原生类型，List&amp;lt;Object&amp;gt;表示可以持有任意类型的对象，前者则逃避了泛型检查，可以将List&amp;lt;String&amp;gt;传递给List的参数，但是不能传递给List&amp;lt;Object&amp;gt;。具体说明看下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public static void main(String[] args){
        List&amp;lt;String&amp;gt; strings = Lists.newArrayList();
        unSafeAdd(strings,new Intger(1));
        String s = strings.get(0);
    }
    private static void unSafeAdd(List list ,Object o){
        list.add(o);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个程序可以正常编译，但是运行到strings.get(0)时试图将Integer转换成String类型会报ClassCastException。而如果用List&amp;lt;Object&amp;gt;代替原生类型List会发现无法编译。
如果要使用泛型，但是不知道或者不关心实际的类型参数，可以使用无限制的通配符类型，用一个？代替，如上例可以表示成List&amp;lt;?&amp;gt;。它可以持有任意集合，这一点类似原生类型。但不能将任何元素（成了null之外）放到List&amp;lt;?&amp;gt;中。
泛型中会用到的一些术语：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;术语&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;参数化的类型&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;List&amp;lt;String&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;实际参数类型&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;String&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;泛型&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;List&amp;lt;E&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;形式类型参数&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;E&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;无限制通配符类型&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;List&amp;lt;?&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;原生类型&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;List&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;有限制类型参数&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&amp;lt;E extends Number&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;递归类型限制&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&amp;lt;T extends Comparator&amp;lt;T&amp;gt;&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;有限制通配符类型&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;List&amp;lt;? extends Number&amp;gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;泛型方法&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;static &amp;lt;E&amp;gt; List&amp;lt;E&amp;gt; asList(E[] e)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;类型擦除:3cba9eda553e6d095741895b3b7fd5aa&#34;&gt;类型擦除&lt;/h3&gt;

&lt;p&gt;正确理解泛型概念的首要前提是理解类型擦除（type erasure）。 Java中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节代码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会被编译器在编译的时候去掉。这个过程就称为类型擦除。如在代码中定义的List&lt;Object&gt;和List&lt;String&gt;等类型，在编译之后都会变成List。JVM看到的只是List，而由泛型附加的类型信息对JVM来说是不可见的。&lt;/p&gt;

&lt;h3 id=&#34;泛型方法:3cba9eda553e6d095741895b3b7fd5aa&#34;&gt;泛型方法&lt;/h3&gt;

&lt;p&gt;与类可以从泛型中受益一样，方法也可以。下面将原生的方法改造成泛型方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    //raw types
    public static Set union(Set s1,Set s2){
        Set result = new HashSet(s1);
        result.addAll(s2);
        return result;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的原生类型是类型不安全的，为了使他类型安全，要在方法中声明一个类型参数，表示这三个集合类型（两个参数，一个返回值），并在方法中使用类型参数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//Generic method
public static &amp;lt;E&amp;gt; Set&amp;lt;E&amp;gt; union(Set&amp;lt;E&amp;gt; s1,Set&amp;lt;E&amp;gt; s2){
    Set&amp;lt;E&amp;gt; result = new HashSet&amp;lt;E&amp;gt;(s1);
    result.addAll(s2);
    return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通配符:3cba9eda553e6d095741895b3b7fd5aa&#34;&gt;通配符&lt;/h3&gt;

&lt;p&gt;上文提到了通配符表示未知的类型，因为对于List&amp;lt;?&amp;gt;中的元素只能用Object来引用，在有些情况下不是很方便。在这些情况下，可以使用上下界来限制未知类型的范围。 如List&amp;lt;? extends Number&amp;gt;说明List中可能包含的元素类型是Number及其子类。而List&amp;lt;? super Number&amp;gt;则说明List中包含的是Number及其父类。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
